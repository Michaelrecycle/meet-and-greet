#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.SERVER_POST || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const ws = require('ws')
const jwt = require('jsonwebtoken')
const url = require('url')

const server = require('http').createServer(require('../app'))
const wss = new ws.Server({
    server,
    verifyClient: function({ req }, done) {
        const { query: { token } } = url.parse(req.url, true)

        try {
            req.jwt = jwt.verify(token, process.env.TOKEN_SECRET)
            done(true)
        }
        catch (err) {
            return done(false, 403, 'Invalid token')
        }
    }
})

wss.on('connection', (ws, req) => {
  ws.jwt = req.jwt
    ws.on('message', (message) => {
        console.log('received: %s', message)
        ws.send(`Hello, you sent -> ${message}`)
    })
    ws.on('close', message => {
        console.log('closed!')
    })
    ws.send('Hi there, I am a WebSocket server')
    wss.broadcastQueueUpdate('test')
})

wss.broadcastQueueUpdate = function(queue) {
    this.clients.forEach(client => {
        client.send(queue.indexOf(client.jwt._id))
    })
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = wss